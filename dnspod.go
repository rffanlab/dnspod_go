package main

import (
	"net/http"
	"fmt"
	"io/ioutil"
	"net/url"
	"encoding/json"
	//"strconv"
	"strconv"
)

type AutoGenerated struct {
	Status struct {
		       Code string `json:"code"`
		       Message string `json:"message"`
		       CreatedAt string `json:"created_at"`
	       } `json:"status"`
	Info struct {
		       DomainTotal int `json:"domain_total"`
		       AllTotal int `json:"all_total"`
		       MineTotal int `json:"mine_total"`
		       ShareTotal int `json:"share_total"`
		       VipTotal int `json:"vip_total"`
		       IsmarkTotal int `json:"ismark_total"`
		       PauseTotal int `json:"pause_total"`
		       ErrorTotal int `json:"error_total"`
		       LockTotal int `json:"lock_total"`
		       SpamTotal int `json:"spam_total"`
		       VipExpire int `json:"vip_expire"`
		       ShareOutTotal int `json:"share_out_total"`
	       } `json:"info"`
	Domains []struct {
		ID int64 `json:"id"`
		Status string `json:"status"`
		Grade string `json:"grade"`
		GroupID string `json:"group_id"`
		SearchenginePush string `json:"searchengine_push"`
		IsMark string `json:"is_mark"`
		TTL string `json:"ttl"`
		CnameSpeedup string `json:"cname_speedup"`
		Remark string `json:"remark"`
		CreatedOn string `json:"created_on"`
		UpdatedOn string `json:"updated_on"`
		Punycode string `json:"punycode"`
		ExtStatus string `json:"ext_status"`
		Name string `json:"name"`
		GradeTitle string `json:"grade_title"`
		IsVip string `json:"is_vip"`
		Owner string `json:"owner"`
		Records string `json:"records"`
	} `json:"domains"`
}



type DomainRecord struct {
	Status struct {
		       Code string `json:"code"`
		       Message string `json:"message"`
		       CreatedAt string `json:"created_at"`
	       } `json:"status"`
	Domain struct {
		       ID int `json:"id"`
		       Name string `json:"name"`
		       Punycode string `json:"punycode"`
		       Grade string `json:"grade"`
		       Owner string `json:"owner"`
		       ExtStatus string `json:"ext_status"`
	       } `json:"domain"`
	Info struct {
		       SubDomains string `json:"sub_domains"`
		       RecordTotal string `json:"record_total"`
	       } `json:"info"`
	Records []struct {
		ID string `json:"id"`
		Name string `json:"name"`
		Line string `json:"line"`
		LineID string `json:"line_id"`
		Type string `json:"type"`
		TTL string `json:"ttl"`
		Value string `json:"value"`
		Weight interface{} `json:"weight"`
		Mx string `json:"mx"`
		Enabled string `json:"enabled"`
		Status string `json:"status"`
		MonitorStatus string `json:"monitor_status"`
		Remark string `json:"remark"`
		UpdatedOn string `json:"updated_on"`
		UseAqb string `json:"use_aqb"`
		Hold string `json:"hold,omitempty"`
	} `json:"records"`
}


type LoginInfo struct {
	LoginEmail string `json:"login_email"`
	LoginPassword string `json:"login_password"`
	Domain string `json:"domain"`
	Record string `json:"record"`
}



func main()  {
	//定义需要更改的变量
	var IPToUPdate string
	var domainIdToUpadate int64
	var recordIdToUpdate string

	resp,_ := http.Get("http://rffan.com/getip.php")
	defer resp.Body.Close()
	body,_ := ioutil.ReadAll(resp.Body)
	//fmt.Println(string(body))
	IPToUPdate = string(body)
	fmt.Println("新IP是",IPToUPdate)

	//var login_info LoginInfo
	//读取配置信息

	var login_info LoginInfo
	the_file,_ := ioutil.ReadFile("./config.json")
	fmt.Println(string(the_file))
	json.Unmarshal(the_file,&login_info)
	fmt.Println(login_info)


	//配置信息
	domainList := "https://dnsapi.cn/Domain.list"
	login_email := login_info.LoginEmail
	login_password := login_info.LoginPassword
	theRecordDomain := login_info.Domain
	theRecord := login_info.Record

	//获取域名列表
	respPost,_ := http.PostForm(domainList,url.Values{"login_email":{login_email},"login_password":{login_password},"format":{"json"}})
	defer respPost.Body.Close()

	bodyPost,_ := ioutil.ReadAll(respPost.Body)
	var jsoned AutoGenerated
	json.Unmarshal(bodyPost,&jsoned)
	domains := jsoned.Domains
	for _,value := range domains{
		if value.Name == theRecordDomain {
			domainIdToUpadate = value.ID
			//subDomain = value.Name
		}
	}

	//获取该域名下的记录的ID
	fmt.Println(domainIdToUpadate)
	respDomainRecord,_ := http.PostForm("https://dnsapi.cn/Record.List",url.Values{"login_email":{login_email},"login_password":{login_password},"format":{"json"},"domain_id":{strconv.FormatInt(domainIdToUpadate,10)}})
	defer  respDomainRecord.Body.Close()
	theDomainRecord,_ := ioutil.ReadAll(respDomainRecord.Body)
	var theDomainRecords DomainRecord
	json.Unmarshal(theDomainRecord,&theDomainRecords)
	for _,value := range theDomainRecords.Records {
		fmt.Println(value)
		if value.Name == theRecord {
			fmt.Println(value.ID)
			recordIdToUpdate = value.ID
		}
	}
	respUpdateRecord,_ := http.PostForm("https://dnsapi.cn/Record.Modify",url.Values{"login_email":{login_email},"login_password":{login_password},"format":{"json"},"domain_id":{strconv.FormatInt(domainIdToUpadate,10)},"record_id":{recordIdToUpdate},"sub_domain":{theRecord},"record_type":{"A"},"record_line":{"默认"},"value":{IPToUPdate}})
	defer respUpdateRecord.Body.Close()

	respAfterUpdate,_:=ioutil.ReadAll(respUpdateRecord.Body)
	fmt.Println(string(respAfterUpdate))

}
